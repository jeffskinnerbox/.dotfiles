#
# Maintainer:   jeffskinnerbox@yahoo.com / www.jeffskinnerbox.me
# Version:      1.1.0
#
# DESCRIPTION:
#   Set color bash prompt according to active virtualenv, git branch,
#   and return status of last command.  Sets the bash prompt according to:
#    * the active virtualenv
#    * the branch/status of the current git repository
#    * the return value of the previous command
#    * the fact you just came from Windows and are used to having newlines in
#      your prompts.
#
# USAGE:
#    1. Save this file as ~/.dotfiles/pkg-bash/bash_prompt
#    2. Add the following line to the end of your ~/.dotfiles/pkg-bash/.bashrc
#       or ~/.dotfiles/pkg-bash/.bash_profile:
#         source ~/.bash/bash_prompt
#
# SOURCE:
#   Based on https://gist.github.com/jabbalaci/6651278
#



# default primary prompt, shown below, is first set in .bashrc but is later changed by the code block below
#export PS1="\[\033[01;32m\]\u@\h\[\033[00m\]: \[\033[01;34m\]\w\[\033[00m\] [$?] \$ "


 #----------------------- Set Host Name and User -----------------------
USER_HOST="${BGREEN}$USER@$(hostname):${NCOLOR} "
XX=${USER_HOST}

# ----------------------- Set Color of Prompt Symbal Based on Error State -----------------------
# return the prompt symbol to use, colorized based on the return value of the previous command.
function set_prompt_symbol () {
    if test $1 -eq 0 ; then
        PROMPT_SYMBOL="\$"                    # no error returned, so no red color
    else
        PROMPT_SYMBOL="${BRED}\$${NCOLOR}"    # error was returned, color prompt symbol red
    fi

#   # set prompt color
#   if [[ $EUID -ne 0 ]]; then
#       PROMPT_COLOR="${BGREEN}"
#   else
#       PROMPT_COLOR="${BRED}"
#   fi
}
XX=${USER_HOST}${PROMPT_SYMBOL}



# ----------------------- Get Current Directory Name -----------------------
CURRENT_DIR=$PWD
XX="${USER_HOST} ${CURRENT_DIR} ${PROMPT_SYMBOL}"


# ----------------------- Prompt for Python Virtual Environment -----------------------
# function to check if we're in a .venv directory
in_venv_dir() {
    [[ "$(basename "$PWD")" == ".venv" ]]
}

# function to check if virtual environment is active
venv_active() {
    [[ -n "$VIRTUAL_ENV" ]]
}

# function to create the python virtual environment prompt
set_venv_prompt() {
#   # Get current directory name
#   local current_dir="$(basename "$PWD")"
#   
#   # Default prompt components
#   local user_host="${GREEN}\u@\h${RESET}"
#   local path="${BLUE}\w${RESET}"
#   local prompt_symbol="${WHITE}\$${RESET}"
    
    if venv_active && in_venv_dir; then                                  # Case 1: Both in .venv directory AND virtual environment is active
        local venv_name="$(basename "$VIRTUAL_ENV")"
        #PS1="${PURPLE}[VENV-ACTIVE:${venv_name}]${RESET} ${YELLOW}${user_host}${RESET}:${RED}${path}${RESET}${prompt_symbol} "
        VENV_NAME=${PURPLE}[VENV-ACTIVE:${venv_name}]${NCOLOR}
        XX="${USER_HOST} ${CURRENT_DIR} ${VENV_NAME} ${PROMPT_SYMBOL}"
    elif venv_active; then                                               # Case 2: Virtual environment is active but not in .venv directory
        local venv_name="$(basename "$VIRTUAL_ENV")"
        #PS1="${CYAN}(${venv_name})${RESET} ${user_host}:${path}${prompt_symbol} "
        VENV_NAME=${CYAN}[VENV-ACTIVE:${venv_name}]${NCOLOR}
        XX="${USER_HOST} ${CURRENT_DIR} ${VENV_NAME} ${PROMPT_SYMBOL}"
    elif in_venv_dir; then                                                # Case 3: In .venv directory but virtual environment is not active
        #PS1="${YELLOW}[.venv-dir]${RESET} ${user_host}:${RED}${path}${RESET}${prompt_symbol} "
        VENV_NAME=${YELLOW}[VENV-INACTIVE:${venv_name}]${NCOLOR}
        XX="${USER_HOST} ${CURRENT_DIR} ${VENV_NAME} ${PROMPT_SYMBOL}"
    else                                                                   # Case 4: Default prompt (neither in .venv dir nor venv active)
        #PS1="${user_host}: ${path} ${prompt_symbol} "
        VENV_NAME=""
        XX="${USER_HOST} ${CURRENT_DIR} ${VENV_NAME} ${PROMPT_SYMBOL}"
    fi
}


# ----------------------- Prompt for Git Directory -----------------------
# function to detect whether the current directory is a git repository.
function is_git_repository {
    git branch > /dev/null 2>&1
}

# determine the branch/state information for this git repository.
function set_git_branch {
    git_status="$(git status 2> /dev/null)"        # capture the output of the "git status" command

    # Set color based on clean/staged/dirty
    if [[ ${git_status} =~ "working tree clean" ]] || [[ ${git_status} =~ "working directory clean" ]]; then
        state="${GREEN}"
    elif [[ ${git_status} =~ "Changes to be committed" ]]; then
        state="${YELLOW}"
    else
        state="${RED}"
    fi

    # set arrow icon based on status against remote
    remote_pattern="# Your branch is (.*) of"
    if [[ ${git_status} =~ ${remote_pattern} ]]; then
        if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
            remote="↑"
        else
            remote="↓"
        fi
    else
        remote=""
    fi

    diverge_pattern="# Your branch and (.*) have diverged"
    if [[ ${git_status} =~ ${diverge_pattern} ]]; then
        remote="↕"
    fi

    # Get the name of the branch.
    branch_pattern="^On branch ([^${IFS}]*)"
    if [[ ${git_status} =~ ${branch_pattern} ]]; then
        branch=${BASH_REMATCH[1]}
    fi

    # Set the final branch string.
    BRANCH="${state}(${branch})${remote}${NCOLOR} "
}



# ----------------------- Prompt for Conda Virtual Environment -----------------------
function set_virtualenv () {
#   if [[ "$CONDA_DEFAULT_ENV" = "base" ]]; then
    if [[ "$CONDA_DEFAULT_ENV" = "" ]]; then
        PYTHON_VIRTUALENV=""
    else
        PYTHON_VIRTUALENV="${BBLUE}"["$CONDA_DEFAULT_ENV"]"${NCOLOR} "
    fi
}



# ----------------------- Create the Completed Prompt -----------------------
# Set the full bash prompt.
function set_bash_prompt () {
    # Set the PROMPT_SYMBOL variable./python We do this first so we don't lose the
    # return value of the last command.
    set_prompt_symbol $?

    # set the PYTHON_VIRTUALENV variable.
    set_virtualenv

    # Set the BRANCH variable.
    if is_git_repository ; then
        set_git_branch
    else
        BRANCH=''
    fi
    
    XX="${USER_HOST} ${CURRENT_DIR} ${VENV_NAME} ${BRANCH} ${PROMPT_SYMBOL}"
}

# When set, PROMPT_COMMAND is interpreted as a command to execute
# before the printing of each primary prompt ($PS1).
PROMPT_COMMAND=set_bash_prompt


# ----------------------- Set Title of the Terminal -----------------------
# function at sets the title on the terminal
# NOTE: ${PWD##*/} will give you just the current directory
function set_title () {
    echo -ne "\033]0;${USER}@${HOST} - ${PWD}\007"
}

set_title                        # set the title on the terminal window
